@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BCBlog.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<!-- Page content -->
    <!-- Sign in form -->
    <div class="container-fluid d-flex flex-wrap justify-content-center justify-content-xl-start h-100 pt-5">
        <div class="w-100 align-self-end pt-1 pt-md-4 pb-4" style="max-width: 526px;">
            <h1 class="text-center text-xl-start">Welcome Back</h1>
        <p class="text-center text-xl-start pb-3 mb-3">Don’t have an account yet? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a></p>
        <EditForm Model="Input" OnValidSubmit="LoginUser" class="needs-validation mb-2" novalidate FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="position-relative mb-4">
                <label for="email" class="form-label fs-base">Email</label>
                <InputText id="email" @bind-Value="Input.Email" class="form-control form-control-lg" required />
                <ValidationMessage For="() => Input.Email" class="invalid-feedback position-absolute start-0 top-100" />
            </div>
            <div class="mb-4">
                <label for="password" class="form-label fs-base">Password</label>
                <div class="password-toggle">
                    <InputText type="password" id="password" @bind-Value="Input.Password" class="form-control form-control-lg" required />
                    <label class="password-toggle-btn" aria-label="Show/hide password">
                        <input class="password-toggle-check" type="checkbox">
                        <span class="password-toggle-indicator"></span>
                    </label>
                    <ValidationMessage For="() => Input.Password" class="invalid-feedback position-absolute start-0 top-100" />
                </div>
            </div>
            <div class="mb-4">
                <div class="form-check">
                    <InputCheckbox id="remember" @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label for="remember" class="form-check-label fs-base">Remember me</label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign in</button>
        </EditForm>

            <a href="Account/ForgotPassword" class="btn btn-link btn-lg w-100">Forgot your password?</a>
        </div>
    </div>

    <!-- Background -->
    <div class="position-absolute top-0 end-0 w-50 h-100 bg-position-center bg-repeat-0 bg-size-cover d-none d-xl-block" style="background-image: url('/img/backgroundlogin.jpg');"></div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
