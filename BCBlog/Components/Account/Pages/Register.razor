@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BCBlog.Client.Helpers
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BCBlog.Data
@using BCBlog.Helpers
@using BCBlog.Models

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DBContext


<PageTitle>Register</PageTitle>

<!-- Page content -->

    <!-- Sign in form -->
    <div class="container-fluid d-flex flex-wrap justify-content-center justify-content-xl-start h-100 pt-5">
        <div class="w-100 align-self-end pt-1 pb-2" style="max-width: 526px;">
            <h1 class="text-center text-xl-start">Create a New Account</h1>
            <p class="text-center text-xl-start pb-1 mb-3">Already have an account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Log in here</a></p>
            <EditForm Model="Input" OnValidSubmit="RegisterUser" class="needs-validation mb-2" novalidate FormName="register" enctype="multipart/form-data">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="position-relative mb-4">
                    <label for="email" class="form-label fs-base">Email</label>
                    <InputText id="email" @bind-Value="Input.Email" class="form-control form-control-lg" required />
                    <ValidationMessage For="() => Input.Email" class="invalid-feedback position-absolute start-0 top-100" />
                </div>
                <div class="position-relative mb-4">
                    <label for="first-name" class="form-label fs-base">First Name</label>
                    <InputText id="first-name" @bind-Value="Input.FirstName" class="form-control form-control-lg" required />
                    <ValidationMessage For="() => Input.FirstName" class="invalid-feedback position-absolute start-0 top-100" />
                </div>
                <div class="position-relative mb-4">
                    <label for="last-name" class="form-label fs-base">Last Name</label>
                    <InputText id="last-name" @bind-Value="Input.LastName" class="form-control form-control-lg" required />
                    <ValidationMessage For="() => Input.LastName" class="invalid-feedback position-absolute start-0 top-100" />
                </div>
                <div class="position-relative mb-4">
                    <label for="password" class="form-label fs-base">Password</label>
                    <div class="password-toggle">
                        <InputText type="password" id="password" @bind-Value="Input.Password" class="form-control form-control-lg" required />
                        <label class="password-toggle-btn" aria-label="Show/hide password">
                            <input class="password-toggle-check" type="checkbox">
                            <span class="password-toggle-indicator"></span>
                        </label>
                        <ValidationMessage For="() => Input.Password" class="invalid-feedback position-absolute start-0 top-100" />
                    </div>
                </div>
                <div class="position-relative mb-4">
                    <label for="confirm-password" class="form-label fs-base">Confirm Password</label>
                    <div class="password-toggle">
                        <InputText type="password" id="confirm-password" @bind-Value="Input.ConfirmPassword" class="form-control form-control-lg" required />
                        <label class="password-toggle-btn" aria-label="Show/hide password">
                            <input class="password-toggle-check" type="checkbox">
                            <span class="password-toggle-indicator"></span>
                        </label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="invalid-feedback position-absolute start-0 top-100" />
                    </div>
                </div>
                <div class="mb-4">
                    <div class="row">
                        <div class="col-md-3 text-center overflow-hidden">
                            <img src="@ImageHelper.DefaultProfilePicture" class="rounded" id="imagePreview" height="50" />
                        </div>
                        <div class="col-md-9">
                            <label class="form-label" for="image">Profile Picture</label>
                            <input type="file" class="form-control" accept=".jpg,.jpeg,.png,.svg,.gif" name="Input.ProfilePicture"
                                   onchange="document.getElementById('imagePreview').src = window.URL.createObjectURL(this.files[0])" />
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Register</button>
            </EditForm>
        </div>
    </div>

    <!-- Background -->
    <div class="position-absolute top-0 end-0 w-50 h-100 bg-position-center bg-repeat-0 bg-size-cover d-none d-xl-block" style="background-image: url('/img/backgroundlogin.jpg');"></div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        if (Input.ProfilePicture != null)
        {
            try
            {
                ImageUpload image = await UploadHelper.GetImageUploadAsync(Input.ProfilePicture);
                //save the image
                await DBContext.Images.AddAsync(image);

                user.ImageId = image.Id;
                DBContext.Users.Update(user);
                await DBContext.SaveChangesAsync();
            }
            catch (Exception)
            {
                Console.WriteLine("Unable to upload user image.");
                throw;
            }

        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Display(Name="Profile Picture")]
        public IFormFile? ProfilePicture { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
