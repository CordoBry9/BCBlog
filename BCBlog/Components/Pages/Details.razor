@page "/posts/{slug}"
@using BCBlog.Client.Components.UI
@using BCBlog.Client.Models
@using BCBlog.Client.Services.Interfaces
@using BCBlog.Components.Layout
@layout SidebarLayout
@inject IBlogPostDTOService BlogPostService

@if (blogPost == null)
{
    <PageTitle>Bryan C Blog | Not Found</PageTitle>
    <div class="d-flex h-100 flex-column">
        <h1>Uh Oh!</h1>
        <p class="lead">This post could not be found</p>
        <a href="/" class="btn btn-primary">Go back Home</a>
    </div>
}
else
{
    <PageTitle>Bryan C Blog | @blogPost.Title</PageTitle>
    <BlogPostDetails BlogPost="blogPost"></BlogPostDetails>

    //Authorized view a non authorized view, diff is login option or user
    <AuthorizeView>
        <Authorized>
            <section class="container pt-xl-2 pb-5 mb-md-2 mb-lg-4 mb-xl-5" id="comments">
                <div>
                    <CommentForm @rendermode="InteractiveAuto" BlogPost="blogPost"></CommentForm>
                </div>
            </section>
        </Authorized>
        <NotAuthorized>
              <section class="container pt-xl-2 pb-5 mb-md-2 mb-lg-4 mb-xl-5" id="comments">
                <div>
                    <GuestCommentList BlogPost="blogPost"></GuestCommentList>
                </div>
            </section>
        </NotAuthorized>
    </AuthorizeView>

}

@code {
    #region parameters
    [Parameter]
    public string? Slug { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion


    #region state
    private BlogPostDTO? blogPost;
    #endregion

    #region methods
    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(Slug))
        {
            try
            {
                blogPost = await BlogPostService.GetBlogPostBySlugAsync(Slug);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    #endregion
}
