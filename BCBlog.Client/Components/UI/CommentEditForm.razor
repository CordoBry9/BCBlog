@using BCBlog.Client.Models
@using BCBlog.Client.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject ICommentDTOService CommentService

<EditForm Model="newComment" OnValidSubmit="HandleSubmit" class="row">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="col-12 d-flex flex-column">
        <div class="mb-2 flex-fill vstack">
            <label class="form-label mt-2"><h4>Edit a Comment</h4></label>
            <TinyMCE.Blazor.Editor ScriptSrc="/tinymce/tinymce.min.js" @bind-Value="newComment!.Content"
                                   Field="() => newComment!.Content"
                                   ClassName="rich-text-editor"
                                   Conf="editorConfig" />
            <ValidationMessage For="() => newComment.Content"></ValidationMessage>
        </div>

    </div>
    <div class="row d-flex flex-grow-0">
        <div class="col-12 text-end"><button type="submit" class="btn btn-primary">Save</button></div>
    </div>

    <ValidationSummary></ValidationSummary>
</EditForm>




@code {
    //tested
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public CommentDTO Comment { get; set; } = new CommentDTO();

    [Parameter]
    public BlogPostDTO? BlogPost { get; set; }

    private CommentDTO? newComment;
    private string? imageError;
    private string? fileError;
    private UserInfo? userInfo;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthStateTask!;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            newComment = new CommentDTO()
            {
                AuthorId = userInfo!.UserId,
                AuthorName = userInfo!.FullName,
                BlogPostId = BlogPost!.Id,
                AuthorImageUrl = userInfo!.ProfilePictureUrl
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (userInfo?.UserId is not null)
            {
                Comment.AuthorName = userInfo.FullName;
                Comment.AuthorId = userInfo.UserId;
                Comment.BlogPostId = BlogPost!.Id;
                await CommentService.CreateCommentAsync(Comment);
                //newComments.Add(newComment);
                // COmments = latest comments from DB
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    private static readonly Dictionary<string, object> editorConfig = new()
    {
        { "toolbar", "undo redo | bold italic underline | link codesample " },
        { "plugins", "anchor autolink link charmap preview table codesample" },
        { "default_link_target", "_blank" },
        { "link_assume_external_targets", true },
        { "link_context_toolbar", true },
        { "codesample_languages", new object[] {
                new { text = "HTML/XML", value = "markup" },
                new { text = "JavaScript", value = "javascript" },
                new { text = "CSS", value = "css" },
                new { text = "C#", value = "csharp" },
                new { text = "Razor", value = "razor" },
                new { text = "JSON", value = "json" },
    }},
        { "codesample_global_prismjs", true },
        { "promotion", false },
        { "height", "100%" },
    };
}
